{"version":3,"file":"app/images/notion/route.js","mappings":"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","sources":["webpack://_N_E/./src/app/images/notion/route.ts?50c1","webpack://_N_E/?5122","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/./src/lib/image-proxy.ts","webpack://_N_E/./src/app/images/notion/route.ts"],"sourcesContent":["import { AppRouteRouteModule } from \"next/dist/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/mnt/e/Documents/Study/capycloud/notion-blogs/src/app/images/notion/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/images/notion/route\",\n        pathname: \"/images/notion\",\n        filename: \"route\",\n        bundlePath: \"app/images/notion/route\"\n    },\n    resolvedPagePath: \"/mnt/e/Documents/Study/capycloud/notion-blogs/src/app/images/notion/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","var _self___RSC_MANIFEST;\nimport { createServerModuleMap } from \"next/dist/server/app-render/action-utils\";\nimport { setReferenceManifestsSingleton } from \"next/dist/server/app-render/encryption-utils\";\nimport { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fimages%2Fnotion%2Froute&page=%2Fimages%2Fnotion%2Froute&pagePath=private-next-app-dir%2Fimages%2Fnotion%2Froute.ts&appDir=%2Fmnt%2Fe%2FDocuments%2FStudy%2Fcapycloud%2Fnotion-blogs%2Fsrc%2Fapp&appPaths=%2Fimages%2Fnotion%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=iad1&preferredRegion=cdg1&middlewareConfig=e30%3D!private-next-app-dir/images/notion/route.ts?__next_edge_ssr_entry__\";\nconst nextConfig = {\"env\":{},\"webpack\":null,\"eslint\":{\"ignoreDuringBuilds\":false},\"typescript\":{\"ignoreBuildErrors\":false,\"tsconfigPath\":\"tsconfig.json\"},\"distDir\":\".next\",\"cleanDistDir\":true,\"assetPrefix\":\"\",\"cacheMaxMemorySize\":52428800,\"configOrigin\":\"next.config.ts\",\"useFileSystemPublicRoutes\":true,\"generateEtags\":true,\"pageExtensions\":[\"tsx\",\"ts\",\"jsx\",\"js\"],\"poweredByHeader\":true,\"compress\":true,\"images\":{\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"loaderFile\":\"\",\"domains\":[],\"disableStaticImages\":false,\"minimumCacheTTL\":60,\"formats\":[\"image/webp\"],\"dangerouslyAllowSVG\":false,\"contentSecurityPolicy\":\"script-src 'none'; frame-src 'none'; sandbox;\",\"contentDispositionType\":\"attachment\",\"remotePatterns\":[{\"protocol\":\"https\",\"hostname\":\"prod-files-secure.s3.us-west-2.amazonaws.com\"},{\"protocol\":\"https\",\"hostname\":\"www.notion.so\"},{\"protocol\":\"https\",\"hostname\":\"images.unsplash.com\"},{\"protocol\":\"https\",\"hostname\":\"www.notion-static.com\"}],\"unoptimized\":true},\"devIndicators\":{\"position\":\"bottom-left\"},\"onDemandEntries\":{\"maxInactiveAge\":60000,\"pagesBufferLength\":5},\"amp\":{\"canonicalBase\":\"\"},\"basePath\":\"\",\"sassOptions\":{},\"trailingSlash\":false,\"i18n\":null,\"productionBrowserSourceMaps\":false,\"excludeDefaultMomentLocales\":true,\"serverRuntimeConfig\":{},\"publicRuntimeConfig\":{},\"reactProductionProfiling\":false,\"reactStrictMode\":null,\"reactMaxHeadersLength\":6000,\"httpAgentOptions\":{\"keepAlive\":true},\"logging\":{},\"expireTime\":31536000,\"staticPageGenerationTimeout\":60,\"modularizeImports\":{\"@mui/icons-material\":{\"transform\":\"@mui/icons-material/{{member}}\"},\"lodash\":{\"transform\":\"lodash/{{member}}\"}},\"outputFileTracingRoot\":\"/mnt/e/Documents/Study/capycloud/notion-blogs\",\"experimental\":{\"nodeMiddleware\":false,\"cacheLife\":{\"default\":{\"stale\":300,\"revalidate\":900,\"expire\":4294967294},\"seconds\":{\"stale\":0,\"revalidate\":1,\"expire\":60},\"minutes\":{\"stale\":300,\"revalidate\":60,\"expire\":3600},\"hours\":{\"stale\":300,\"revalidate\":3600,\"expire\":86400},\"days\":{\"stale\":300,\"revalidate\":86400,\"expire\":604800},\"weeks\":{\"stale\":300,\"revalidate\":604800,\"expire\":2592000},\"max\":{\"stale\":300,\"revalidate\":2592000,\"expire\":4294967294}},\"cacheHandlers\":{},\"cssChunking\":true,\"multiZoneDraftMode\":false,\"appNavFailHandling\":false,\"prerenderEarlyExit\":true,\"serverMinification\":true,\"serverSourceMaps\":false,\"linkNoTouchStart\":false,\"caseSensitiveRoutes\":false,\"clientSegmentCache\":false,\"dynamicOnHover\":false,\"preloadEntriesOnStart\":true,\"clientRouterFilter\":true,\"clientRouterFilterRedirects\":false,\"fetchCacheKeyPrefix\":\"\",\"middlewarePrefetch\":\"flexible\",\"optimisticClientCache\":true,\"manualClientBasePath\":false,\"cpus\":1,\"memoryBasedWorkersCount\":false,\"imgOptConcurrency\":null,\"imgOptTimeoutInSeconds\":7,\"imgOptMaxInputPixels\":268402689,\"imgOptSequentialRead\":null,\"isrFlushToDisk\":true,\"workerThreads\":false,\"optimizeCss\":false,\"nextScriptWorkers\":false,\"scrollRestoration\":false,\"externalDir\":false,\"disableOptimizedLoading\":false,\"gzipSize\":true,\"craCompat\":false,\"esmExternals\":true,\"fullySpecified\":false,\"swcTraceProfiling\":false,\"forceSwcTransforms\":false,\"largePageDataBytes\":128000,\"typedRoutes\":false,\"typedEnv\":false,\"parallelServerCompiles\":false,\"parallelServerBuildTraces\":false,\"ppr\":false,\"authInterrupts\":false,\"webpackMemoryOptimizations\":false,\"optimizeServerReact\":true,\"useEarlyImport\":false,\"viewTransition\":false,\"routerBFCache\":false,\"staleTimes\":{\"dynamic\":0,\"static\":300},\"serverComponentsHmrCache\":true,\"staticGenerationMaxConcurrency\":8,\"staticGenerationMinPagesPerWorker\":25,\"dynamicIO\":false,\"inlineCss\":false,\"useCache\":false,\"optimizePackageImports\":[\"lucide-react\",\"date-fns\",\"lodash-es\",\"ramda\",\"antd\",\"react-bootstrap\",\"ahooks\",\"@ant-design/icons\",\"@headlessui/react\",\"@headlessui-float/react\",\"@heroicons/react/20/solid\",\"@heroicons/react/24/solid\",\"@heroicons/react/24/outline\",\"@visx/visx\",\"@tremor/react\",\"rxjs\",\"@mui/material\",\"@mui/icons-material\",\"recharts\",\"react-use\",\"effect\",\"@effect/schema\",\"@effect/platform\",\"@effect/platform-node\",\"@effect/platform-browser\",\"@effect/platform-bun\",\"@effect/sql\",\"@effect/sql-mssql\",\"@effect/sql-mysql2\",\"@effect/sql-pg\",\"@effect/sql-squlite-node\",\"@effect/sql-squlite-bun\",\"@effect/sql-squlite-wasm\",\"@effect/sql-squlite-react-native\",\"@effect/rpc\",\"@effect/rpc-http\",\"@effect/typeclass\",\"@effect/experimental\",\"@effect/opentelemetry\",\"@material-ui/core\",\"@material-ui/icons\",\"@tabler/icons-react\",\"mui-core\",\"react-icons/ai\",\"react-icons/bi\",\"react-icons/bs\",\"react-icons/cg\",\"react-icons/ci\",\"react-icons/di\",\"react-icons/fa\",\"react-icons/fa6\",\"react-icons/fc\",\"react-icons/fi\",\"react-icons/gi\",\"react-icons/go\",\"react-icons/gr\",\"react-icons/hi\",\"react-icons/hi2\",\"react-icons/im\",\"react-icons/io\",\"react-icons/io5\",\"react-icons/lia\",\"react-icons/lib\",\"react-icons/lu\",\"react-icons/md\",\"react-icons/pi\",\"react-icons/ri\",\"react-icons/rx\",\"react-icons/si\",\"react-icons/sl\",\"react-icons/tb\",\"react-icons/tfi\",\"react-icons/ti\",\"react-icons/vsc\",\"react-icons/wi\"]},\"htmlLimitedBots\":\"Mediapartners-Google|Slurp|DuckDuckBot|baiduspider|yandex|sogou|bitlybot|tumblr|vkShare|quora link preview|redditbot|ia_archiver|Bingbot|BingPreview|applebot|facebookexternalhit|facebookcatalog|Twitterbot|LinkedInBot|Slackbot|Discordbot|WhatsApp|SkypeUriPreview|Yeti\",\"bundlePagesRouterDependencies\":false,\"configFile\":\"/mnt/e/Documents/Study/capycloud/notion-blogs/next.config.ts\",\"configFileName\":\"next.config.ts\",\"outputFileTracingExcludes\":{\"*\":[\"**/@img/sharp*/**\",\"**/sharp/lib/**\"]},\"generateStatic500\":false,\"turbopack\":{\"root\":\"/mnt/e/Documents/Study/capycloud/notion-blogs\"}}\nconst maybeJSONParse = (str)=>str ? JSON.parse(str) : undefined;\nconst rscManifest = (_self___RSC_MANIFEST = self.__RSC_MANIFEST) == null ? void 0 : _self___RSC_MANIFEST[\"/images/notion/route\"];\nconst rscServerManifest = maybeJSONParse(self.__RSC_SERVER_MANIFEST);\nif (rscManifest && rscServerManifest) {\n    setReferenceManifestsSingleton({\n        page: \"/images/notion/route\",\n        clientReferenceManifest: rscManifest,\n        serverActionsManifest: rscServerManifest,\n        serverModuleMap: createServerModuleMap({\n            serverActionsManifest: rscServerManifest\n        })\n    });\n}\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule, {\n    nextConfig\n});\n\n//# sourceMappingURL=edge-app-route.js.map","module.exports = require(\"node:buffer\");","module.exports = require(\"node:async_hooks\");","const EXACT_HOSTS = new Set([\n  \"prod-files-secure.s3.us-west-2.amazonaws.com\",\n  \"prod-files-secure.s3.amazonaws.com\",\n  \"s3.us-west-2.amazonaws.com\",\n  \"s3.amazonaws.com\",\n  \"www.notion.so\",\n  \"notion.so\",\n  \"www.notion-static.com\",\n  \"notion-static.com\",\n  \"images.unsplash.com\",\n]);\n\nconst HOST_SUFFIXES = [\n  \".amazonaws.com\",\n  \".notion-static.com\",\n  \".notion.so\",\n  \".s3.amazonaws.com\",\n];\n\nexport const NOTION_IMAGE_PROXY_PATH = \"/images/notion\";\n\nexport function decodeProxySource(value: string | null): string | null {\n  if (!value) return null;\n  try {\n    return decodeURIComponent(value);\n  } catch {\n    return value;\n  }\n}\n\nexport function isAllowedProxyHost(hostname: string): boolean {\n  if (!hostname) return false;\n  if (EXACT_HOSTS.has(hostname)) return true;\n  return HOST_SUFFIXES.some((suffix) => hostname.endsWith(suffix));\n}\n\nexport function shouldProxyNotionImage(rawUrl: string | undefined | null): boolean {\n  if (!rawUrl) return false;\n  if (rawUrl.startsWith(NOTION_IMAGE_PROXY_PATH)) return false;\n  try {\n    const url = new URL(rawUrl);\n    if (!/(http|https):/.test(url.protocol)) {\n      return false;\n    }\n    return isAllowedProxyHost(url.hostname);\n  } catch {\n    return false;\n  }\n}\n\nexport function buildNotionImageProxy(rawUrl: string | undefined | null): string | undefined {\n  if (!rawUrl) return undefined;\n  if (!shouldProxyNotionImage(rawUrl)) {\n    return rawUrl;\n  }\n  return `${NOTION_IMAGE_PROXY_PATH}?src=${encodeURIComponent(rawUrl)}`;\n}\n\nexport function parseProxyTarget(raw: string | null): URL | null {\n  const decoded = decodeProxySource(raw);\n  if (!decoded) return null;\n  if (decoded.startsWith(NOTION_IMAGE_PROXY_PATH)) {\n    return null;\n  }\n  let candidate: URL;\n  try {\n    candidate = new URL(decoded);\n  } catch {\n    return null;\n  }\n  if (!/(http|https):/.test(candidate.protocol)) {\n    return null;\n  }\n  if (!isAllowedProxyHost(candidate.hostname)) {\n    return null;\n  }\n  return candidate;\n}\n","import { NextRequest } from \"next/server\";\nimport type { KVNamespace, RequestInitCfProperties } from \"@cloudflare/workers-types\";\nimport {\n  NOTION_IMAGE_PROXY_PATH,\n  parseProxyTarget,\n} from \"@/lib/image-proxy\";\n\nconst CACHE_SECONDS = 60 * 60 * 12; // 12 hours\nconst STALE_SECONDS = 60 * 60 * 24; // 24 hours\nconst CACHE_HEADER = `public, max-age=0, s-maxage=${CACHE_SECONDS}, stale-while-revalidate=${STALE_SECONDS}`;\nconst KV_TTL_SECONDS = 60 * 60 * 24 * 30; // 30 days\n\nconst NOTION_SIGNED_HOSTS = new Set([\n  \"prod-files-secure.s3.us-west-2.amazonaws.com\",\n  \"prod-files-secure.s3.amazonaws.com\",\n  \"s3.us-west-2.amazonaws.com\",\n  \"s3.amazonaws.com\",\n  \"www.notion-static.com\",\n  \"notion-static.com\",\n]);\n\nfunction buildNotionImageProxyUrl(sourceUrl: URL): URL {\n  const proxy = new URL(`https://www.notion.so/image/${encodeURIComponent(sourceUrl.toString())}`);\n  proxy.searchParams.set(\"cache\", \"v2\");\n  if (!proxy.searchParams.has(\"table\")) {\n    proxy.searchParams.set(\"table\", \"block\");\n  }\n  return proxy;\n}\n\ntype CfCacheStorage = { default: Cache };\n\ntype Env = {\n  KV: KVNamespace;\n};\n\nconst encoder = new TextEncoder();\ntype StoredMetadata = {\n  contentType?: string;\n  source?: string;\n};\n\nconst FALLBACK_KV = {\n  async get() {\n    return null;\n  },\n  async getWithMetadata() {\n    return { value: null, metadata: null, cacheStatus: null };\n  },\n  async put() {\n    return;\n  },\n  async delete() {\n    return;\n  },\n  async list() {\n    return { keys: [], list_complete: true, cacheStatus: null };\n  },\n} as unknown as KVNamespace;\n\nlet fallbackEnv: Env | null = null;\nlet hasLoggedMissingBindings = false;\n\nfunction resolveEnv(context: unknown): Env | null {\n  if (!context || typeof context !== \"object\") return null;\n  if (\"env\" in context && (context as { env?: Env }).env) {\n    return (context as { env: Env }).env;\n  }\n  if (\"context\" in context && typeof (context as { context?: unknown }).context === \"object\") {\n    const nested = (context as { context?: { env?: Env } }).context;\n    if (nested?.env) return nested.env;\n  }\n  return null;\n}\n\nfunction getEnvWithFallback(context: unknown): Env {\n  const env = resolveEnv(context);\n  if (env?.KV) {\n    return env;\n  }\n\n  if (!hasLoggedMissingBindings) {\n    console.warn(\n      \"Missing Cloudflare KV binding in route context. Falling back to in-memory passthrough; images won't be cached locally.\"\n    );\n    hasLoggedMissingBindings = true;\n  }\n\n  if (!fallbackEnv) {\n    fallbackEnv = { KV: FALLBACK_KV };\n  }\n\n  return fallbackEnv;\n}\n\nasync function createHash(input: string): Promise<string> {\n  const data = encoder.encode(input);\n  const digest = await crypto.subtle.digest(\"SHA-1\", data);\n  const bytes = new Uint8Array(digest);\n  let hex = \"\";\n  for (const byte of bytes) {\n    hex += byte.toString(16).padStart(2, \"0\");\n  }\n  return hex;\n}\n\nfunction buildResponseHeaders(upstream: Response | null, source: URL, contentType?: string): Headers {\n  const headers = new Headers();\n  const type = contentType ?? upstream?.headers.get(\"content-type\") ?? \"application/octet-stream\";\n  headers.set(\"content-type\", type);\n\n  const cacheControl = upstream?.headers.get(\"cache-control\");\n  headers.set(\"cache-control\", cacheControl ?? CACHE_HEADER);\n\n  const etag = upstream?.headers.get(\"etag\");\n  if (etag) headers.set(\"etag\", etag);\n\n  const lastModified = upstream?.headers.get(\"last-modified\");\n  if (lastModified) headers.set(\"last-modified\", lastModified);\n\n  headers.set(\"x-proxied-from\", source.origin);\n  headers.set(\"access-control-allow-origin\", \"*\");\n\n  return headers;\n}\n\nasync function proxyImage(\n  request: NextRequest,\n  method: \"GET\" | \"HEAD\",\n  env: Env,\n  sourceUrlOverride?: URL,\n  kvKeyOverride?: string\n): Promise<Response> {\n  const cacheStorage = (globalThis as unknown as { caches?: CfCacheStorage }).caches;\n\n  if (cacheStorage) {\n    const cacheKey = new Request(request.url, request);\n    const cached = await cacheStorage.default.match(cacheKey);\n    if (cached) {\n      const clone = cached.clone();\n      const headers = new Headers(clone.headers);\n      headers.set(\"x-cache-status\", \"edge-cache\");\n      if (method === \"HEAD\") {\n        return new Response(null, {\n          status: clone.status,\n          statusText: clone.statusText,\n          headers,\n        });\n      }\n\n      return new Response(clone.body, {\n        status: clone.status,\n        statusText: clone.statusText,\n        headers,\n      });\n    }\n  }\n\n  const sourceUrl = sourceUrlOverride ?? parseProxyTarget(request.nextUrl.searchParams.get(\"src\"));\n\n  if (!sourceUrl) {\n    return new Response(\"Missing or unsupported src parameter\", { status: 400 });\n  }\n\n  try {\n    const upstreamCandidates: URL[] = [];\n\n    if (NOTION_SIGNED_HOSTS.has(sourceUrl.hostname)) {\n      upstreamCandidates.push(buildNotionImageProxyUrl(sourceUrl));\n    }\n\n    upstreamCandidates.push(sourceUrl);\n\n    let upstream: Response | null = null;\n\n    const upstreamInit: RequestInit & { cf?: RequestInitCfProperties } = {\n      cf: {\n        cacheTtl: CACHE_SECONDS,\n        cacheEverything: true,\n      },\n    };\n\n    for (const candidate of upstreamCandidates) {\n      const upstreamRequest = new Request(candidate.toString(), {\n        method,\n        headers: {\n          accept: request.headers.get(\"accept\") ?? \"image/*\",\n          \"user-agent\": request.headers.get(\"user-agent\") ?? \"notion-image-proxy\",\n        },\n      });\n\n      const result = await fetch(upstreamRequest, upstreamInit);\n      if (result.ok) {\n        upstream = result;\n        break;\n      }\n\n      if (!upstream || upstream.status === 403 || upstream.status === 404) {\n        upstream = result;\n      } else {\n        result.body?.cancel();\n      }\n    }\n\n    if (!upstream || !upstream.ok) {\n      const status = upstream?.status ?? 502;\n      upstream?.body?.cancel();\n      return new Response(\"Upstream image request failed\", { status });\n    }\n\n    const buffer = await upstream.arrayBuffer();\n    const contentType = upstream.headers.get(\"content-type\") ?? \"application/octet-stream\";\n    const headers = buildResponseHeaders(upstream, sourceUrl, contentType);\n    headers.set(\"cache-control\", CACHE_HEADER);\n    headers.set(\"x-cache-status\", \"origin\");\n\n    const cacheKey = kvKeyOverride ?? (await createHash(sourceUrl.toString()));\n    try {\n      await env.KV.put(cacheKey, buffer, {\n        expirationTtl: KV_TTL_SECONDS,\n        metadata: {\n          contentType,\n          source: sourceUrl.toString(),\n        },\n      });\n    } catch (error) {\n      console.warn(\"Failed to persist image in KV\", error);\n    }\n\n    const response = new Response(method === \"HEAD\" ? null : buffer, {\n      status: 200,\n      headers,\n    });\n\n    if (cacheStorage && method === \"GET\") {\n      try {\n        await cacheStorage.default.put(new Request(request.url, request), response.clone());\n      } catch (error) {\n        console.warn(\"Failed to cache image response\", error);\n      }\n    }\n\n    return response;\n  } catch (error) {\n    console.error(\"Image proxy error\", error);\n    return new Response(\"Failed to proxy image\", { status: 502 });\n  }\n}\n\nasync function getFromKV(\n  key: string,\n  method: \"GET\" | \"HEAD\",\n  sourceUrl: URL,\n  env: Env,\n  cacheStorage: CfCacheStorage | undefined,\n  request: NextRequest\n): Promise<Response | null> {\n  try {\n    const result = await env.KV.getWithMetadata(key, \"arrayBuffer\" as const);\n    const value = result.value as ArrayBuffer | null;\n    const metadata = result.metadata as StoredMetadata | null;\n    if (!value) return null;\n\n    const headers = buildResponseHeaders(null, sourceUrl, metadata?.contentType);\n    headers.set(\"cache-control\", CACHE_HEADER);\n    headers.set(\"x-cache-status\", \"kv\");\n\n    if (method === \"HEAD\") {\n      return new Response(null, { status: 200, headers });\n    }\n\n    const response = new Response(value, { status: 200, headers });\n\n    if (cacheStorage) {\n      try {\n        await cacheStorage.default.put(new Request(request.url, request), response.clone());\n      } catch (error) {\n        console.warn(\"Failed to cache KV response\", error);\n      }\n    }\n\n    return response;\n  } catch (error) {\n    console.warn(\"Failed to read from KV\", error);\n    return null;\n  }\n}\n\nexport const runtime = \"edge\";\nexport const preferredRegion = [\"iad1\", \"cdg1\"];\nexport const dynamic = \"force-dynamic\";\nexport const revalidate = 0;\n\nexport async function GET(request: NextRequest, context: unknown) {\n  const env = getEnvWithFallback(context);\n  const cacheStorage = (globalThis as unknown as { caches?: CfCacheStorage }).caches;\n  const sourceUrl = parseProxyTarget(request.nextUrl.searchParams.get(\"src\"));\n  if (!sourceUrl) {\n    return new Response(\"Missing or unsupported src parameter\", { status: 400 });\n  }\n  const key = await createHash(sourceUrl.toString());\n\n  const cachedKV = await getFromKV(key, \"GET\", sourceUrl, env, cacheStorage, request);\n  if (cachedKV) return cachedKV;\n\n  return proxyImage(request, \"GET\", env, sourceUrl, key);\n}\n\nexport async function HEAD(request: NextRequest, context: unknown) {\n  const env = getEnvWithFallback(context);\n  const cacheStorage = (globalThis as unknown as { caches?: CfCacheStorage }).caches;\n  const sourceUrl = parseProxyTarget(request.nextUrl.searchParams.get(\"src\"));\n  if (!sourceUrl) {\n    return new Response(\"Missing or unsupported src parameter\", { status: 400 });\n  }\n  const key = await createHash(sourceUrl.toString());\n\n  const cachedKV = await getFromKV(key, \"HEAD\", sourceUrl, env, cacheStorage, request);\n  if (cachedKV) return cachedKV;\n\n  return proxyImage(request, \"HEAD\", env, sourceUrl, key);\n}\n"],"names":["EXACT_HOSTS","Set","HOST_SUFFIXES","parseProxyTarget","raw","candidate","decoded","decodeProxySource","value","decodeURIComponent","startsWith","URL","test","protocol","hostname","has","some","endsWith","suffix","CACHE_HEADER","CACHE_SECONDS","NOTION_SIGNED_HOSTS","encoder","TextEncoder","FALLBACK_KV","get","getWithMetadata","metadata","cacheStatus","put","delete","list","keys","list_complete","fallbackEnv","hasLoggedMissingBindings","getEnvWithFallback","context","env","resolveEnv","nested","KV","console","warn","createHash","input","data","encode","bytes","Uint8Array","crypto","subtle","digest","hex","byte","toString","padStart","buildResponseHeaders","upstream","source","contentType","headers","Headers","type","set","cacheControl","etag","lastModified","origin","proxyImage","request","method","sourceUrlOverride","kvKeyOverride","cacheStorage","caches","cacheKey","Request","url","cached","default","match","clone","Response","status","statusText","body","sourceUrl","nextUrl","searchParams","upstreamCandidates","push","buildNotionImageProxyUrl","proxy","encodeURIComponent","upstreamInit","cf","cacheTtl","cacheEverything","upstreamRequest","accept","result","fetch","ok","cancel","buffer","arrayBuffer","expirationTtl","KV_TTL_SECONDS","error","response","getFromKV","key","runtime","GET","cachedKV","HEAD"],"sourceRoot":"","ignoreList":[]}