[
  {
    "id": "27e4a369-535d-801b-ba5b-e493f6dc4df5",
    "title": "Post Installation OCP on AWS (part 2)",
    "slug": "post-installation-ocp-on-aws-part-2",
    "coverImage": "/notion-images/92e44021be160ec74038d25911315d5cd336ee8a.png",
    "coverImageOriginal": "/notion-images/92e44021be160ec74038d25911315d5cd336ee8a.png",
    "description": "# Introduction",
    "date": "2025-07-18",
    "content": "\n# Introduction\n\n\nIn part one we are donely create the cluster OCP with IPI method\n\n\nTopology :\n\n\n![image.png](/notion-images/dd9099b63537f41786f81d0c44061b98460fcca8.png)\n\n\n# Prerequisite\n\n1. Account Redhat Subscription Openshift\n2. Aws Console\n3. Account RedHat Subscribtion\n\n# Post Installation\n\n\n### A. Add Admin User\n\n\nCreate dedicated admin user is standard post-installation step for every OCP cluster, this user serves as the primary cluster administrator, as the default 'kubeadmin' user is temporary and should be removed according to best practices\n\n> [**Reference**](https://docs.redhat.com/en/documentation/openshift_container_platform/4.16/html/authentication_and_authorization/configuring-identity-providers#configuring-htpasswd-identity-provider)\n1. **Create** <span class=\"notion-red\" style=\"color:#E03A45\">**`htpasswd`**</span>\n\n    ```bash\n    sudo apt install apache2-utils -y\n    htpasswd -c -B user.htpasswd __NCOLOR_START:red__adminocp__NCOLOR_END__\n    - <Password>\n    ```\n\n2. **Create** <span class=\"notion-red\" style=\"color:#E03A45\">**`secret`**</span>\n\n    ```bash\n    oc create secret generic __NCOLOR_START:red__htpass-secret__NCOLOR_END__ --from-file=htpasswd=<path_to_users.htpasswd> -n openshift-config\n    ```\n\n3. **Edit** **`oauth`**\n\n    ![image.png](/notion-images/797eebad1a3bf7892427b1f02e8d087b5548f4e7.png)\n\n\n    ```bash\n    oc get oauth cluster -o yaml > oauth.yaml\n    vim oauth.yaml\n    ```\n\n\n    ```yaml\n    spec:\n      identityProviders:\n        - name: local-user\n          mappingMethod: claim\n          type: HTPasswd\n          htpasswd:\n            fileData:\n              name: __NCOLOR_START:red__htpass-secret__NCOLOR_END__\n    ```\n\n\n    ```bash\n    oc replace -f oauth.yaml\n    # apply policy\n    oc adm policy add-cluster-role-to-user cluster-admin __NCOLOR_START:red__adminocp__NCOLOR_END__\n    ```\n\n4. Verify Login user `adminocp` or login via internal API CLI\n\n### B. Machine Config Pool\n\n\nMachine Config Pool (MCP) works by grouping the types of infrastructure that we will create later, in part 1 there is a topology explained we will use 3 types of infrastructure nodes namely : Router, Logging, and Monreg. From each infrastructure node is template take from worker\n\n> [**Reference**](https://www.redhat.com/en/blog/openshift-container-platform-4-how-does-machine-config-pool-work)\n\nRepeat this step for <span class=\"notion-red\" style=\"color:#E03A45\">Router, Logging, Monreg</span>\n\n- router\n- logging\n- monreg\n1. Login **Dashboard Menu →** <span class=\"notion-blue\" style=\"color:#0B6E99\">**`Compute`**</span>**→** <span class=\"notion-blue\" style=\"color:#0B6E99\">**`MachineConfigPools`**</span>**→** Create <span class=\"notion-blue\" style=\"color:#0B6E99\">**`MachineConfigPools`**</span>\n\n    ![image.png](/notion-images/d77161350f5606470f74f9e37ae8920e99cbbeb1.png)\n\n\n    ```yaml\n    apiVersion: machineconfiguration.openshift.io/v1\n    kind: MachineConfigPool\n    metadata:\n      name: __NCOLOR_START:red__router __NCOLOR_END____NCOLOR_START:green__#CHANGE THIS#__NCOLOR_END__\n    spec:\n      machineConfigSelector:\n        matchExpressions:\n          - key: machineconfiguration.openshift.io/role\n            operator: In\n            values:\n    \t\t      - worker\n              - __NCOLOR_START:red__router__NCOLOR_END____NCOLOR_START:red__  __NCOLOR_END____NCOLOR_START:green__#CHANGE THIS#__NCOLOR_END__\n      nodeSelector:\n        matchLabels:\n          node-role.kubernetes.io/__NCOLOR_START:red__router__NCOLOR_END__: \"\" __NCOLOR_START:green__#CHANGE THIS#__NCOLOR_END__\n    ```\n\n2. Verify Machine Config Pools\n\n### C. Machine Sets\n\n\nMachineSets in AWS OpenShift are used to automatically manage the configuration and deployment of EC2 instances. These instances are typically distributed across multiple AWS Availability Zones (AZs) based on the defined subnets to ensure high availability and fault tolerance. By default, MachineSets are used to manage worker nodes, and in a multi-zone setup. For example, using the ap-southeast-1 (Singapore) region with three AZs (a, b, and c) separate MachineSets should be defined for each zone. However, in this case, we will define MachineSets not only by zone but also by node type, separating those used for infra nodes and those for application workloads (worker nodes).\n\n> [<span class=\"notion-red\" style=\"color:#E03A45\">**Reference**</span>](https://docs.redhat.com/en/documentation/openshift_container_platform/4.16/html/machine_management/managing-compute-machines-with-the-machine-api)\n> [<span class=\"notion-red\" style=\"color:#E03A45\">**Reference**</span>](https://docs.redhat.com/en/documentation/openshift_container_platform/4.16/html/machine_management/managing-compute-machines-with-the-machine-api)\n\n🚨 Before do configuration for machine sets, you need to identify these needs from your cluster, you need to access AWS console\n\n\n<span class=\"notion-red\" style=\"color:#E03A45\">Example</span> :\n\n- **<infrastructure_id> = ocp-dev-rdscr**\n- **<ami_id> =  ami-0e22aa720418e43f5**\n1. **Dashboard Menu →** <span class=\"notion-blue\" style=\"color:#0B6E99\">**`Compute`**</span> **→** <span class=\"notion-blue\" style=\"color:#0B6E99\">**`MachineSets`**</span> **→** Create <span class=\"notion-blue\" style=\"color:#0B6E99\">**`MachineSets`**</span>\n\n    ![image.png](/notion-images/c36d55ebe4a60d02886041e447d02ba4aa2c54ce.png)\n\n\n    💡**Repeat this step for Worker Node & Infra Node**\n\n    - logging = ap-southeast-1a - ap-southeast-1b - ap-southeast-1c\n    - monreg = ap-southeast-1a - ap-southeast-1b\n    - router = ap-southeast-1a - ap-southeast-1c\n    - worker = ap-southeast-1a - ap-southeast-1b - ap-southeast-1c\n\n    ```yaml\n    apiVersion: machine.openshift.io/v1beta1\n    kind: MachineSet\n    metadata:\n      name: __NCOLOR_START:red__<infrastructure_id>-monreg-ap-southeast-1a__NCOLOR_END__ __NCOLOR_START:green__#CHANGE THIS#__NCOLOR_END__\n      namespace: openshift-machine-api\n      labels:\n        machine.openshift.io/cluster-api-cluster: __NCOLOR_START:red__<infrastructure_id> __NCOLOR_END____NCOLOR_START:green__#CHANGE THIS#__NCOLOR_END__\n    spec:\n      replicas: 1\n      selector:\n        matchLabels:\n          machine.openshift.io/cluster-api-cluster: __NCOLOR_START:red__<infrastructure_id>__NCOLOR_END__ __NCOLOR_START:green__#CHANGE THIS#__NCOLOR_END__\n          machine.openshift.io/cluster-api-machineset: __NCOLOR_START:red__<infrastructure_id>__NCOLOR_END__-__NCOLOR_START:red__monreg-ap-southeast-1a __NCOLOR_END____NCOLOR_START:green__#CHANGE THIS#__NCOLOR_END__\n      template:\n        metadata:\n          labels:\n            machine.openshift.io/cluster-api-cluster: __NCOLOR_START:red__<infrastructure_id>__NCOLOR_END__ __NCOLOR_START:green__#CHANGE THIS#__NCOLOR_END__\n            machine.openshift.io/cluster-api-machine-role: __NCOLOR_START:red__monreg __NCOLOR_END____NCOLOR_START:green__#CHANGE THIS#__NCOLOR_END__\n            machine.openshift.io/cluster-api-machine-type: __NCOLOR_START:red__monreg __NCOLOR_END____NCOLOR_START:green__#CHANGE THIS#__NCOLOR_END__\n            machine.openshift.io/cluster-api-machineset: __NCOLOR_START:red__<infrastructure_id>-monreg-ap-southeast-1a__NCOLOR_END__ __NCOLOR_START:green__#CHANGE THIS#__NCOLOR_END__\n        spec:\n          metadata:\n            labels:\n              node-role.kubernetes.io/__NCOLOR_START:red__monreg__NCOLOR_END__: \"\" __NCOLOR_START:green__#CHANGE THIS#__NCOLOR_END__\n          providerSpec:\n            value:\n              apiVersion: machine.openshift.io/v1beta1\n              kind: AWSMachineProviderConfig\n              ami:\n                id: __NCOLOR_START:red__<ami_id>__NCOLOR_END__ __NCOLOR_START:green__#CHANGE THIS#__NCOLOR_END__\n              instanceType: __NCOLOR_START:red__m5.4xlarge__NCOLOR_END__ __NCOLOR_START:green__#CHANGE THIS#__NCOLOR_END__\n              iamInstanceProfile:\n                id: __NCOLOR_START:red__<infrastructure_id>__NCOLOR_END__-worker-profile __NCOLOR_START:green__#CHANGE THIS#__NCOLOR_END__\n              placement:\n                availabilityZone: __NCOLOR_START:red__ap-southeast-1a__NCOLOR_END__ __NCOLOR_START:green__#CHANGE THIS#__NCOLOR_END__\n                region: __NCOLOR_START:red__ap-southeast-1__NCOLOR_END__ __NCOLOR_START:green__#CHANGE THIS#__NCOLOR_END__\n              securityGroups:\n                - filters:\n                    - name: tag:Name\n                      values:\n                        - __NCOLOR_START:red__<infrastructure_id>__NCOLOR_END__-node\n                - filters:\n                    - name: tag:Name\n                      values:\n                        - __NCOLOR_START:red__<infrastructure_id>__NCOLOR_END__-lb\n              subnet:\n                filters:\n                  - name: tag:Name\n                    values:\n                      - __NCOLOR_START:red__<infrastructure_id>-private-ap-southeast-1a__NCOLOR_END__ __NCOLOR_START:green__#CHANGE THIS#__NCOLOR_END__\n              blockDevices:\n                - ebs:\n                    volumeSize: 100\n                    volumeType: gp2\n                    iops: 4000\n              credentialsSecret:\n                name: aws-cloud-credentials\n              userDataSecret:\n                name: worker-user-data\n              tags:\n                - name: kubernetes.io/cluster/__NCOLOR_START:red__<infrastructure_id> __NCOLOR_END____NCOLOR_START:green__#CHANGE THIS#__NCOLOR_END__\n                  value: owned\n    ```\n\n2. Verify Machine Sets\n\n### D. Project Template\n\n\n💡Project templates are used to provision projects with predefined settings. In this case, we add node selectors so that when an application project is created, workloads are automatically scheduled on designated worker nodes. To ensure this works correctly, make sure that appropriate <span class=\"notion-green\" style=\"color:#0F7B58\">**node labels have been applied to both worker and infra nodes**</span>. Additionally, you can disable self-provisioning of projects for regular users if needed.\n\n> [**Reference**](https://docs.redhat.com/en/documentation/openshift_container_platform/4.7/html/applications/projects#configuring-project-creation)\n1. Create Project template\n\n    ```bash\n    oc adm create-bootstrap-project-template -o yaml > yaml_collection/template.yaml\n    vim yaml_collection/template.yaml\n    ```\n\n\n    ```yaml\n    apiVersion: config.openshift.io/v1\n    kind: Template\n    metadata:\n      creationTimestamp: null\n      name: __NCOLOR_START:red__project-request__NCOLOR_END__\n    objects:\n    - apiVersion: project.openshift.io/v1\n      kind: Project\n      metadata:\n        annotations:\n          openshift.io/description: ${PROJECT_DESCRIPTION}\n          openshift.io/display-name: ${PROJECT_DISPLAYNAME}\n          openshift.io/requester: ${PROJECT_REQUESTING_USER}\n          openshift.io/node-selector: __NCOLOR_START:red__node-role.kubernetes.io/worker= __NCOLOR_END____NCOLOR_START:green__#ADD THIS#__NCOLOR_END__\n        creationTimestamp: null\n        name: ${PROJECT_NAME}\n      spec: {}\n      status: {}\n    - apiVersion: rbac.authorization.k8s.io/v1\n      kind: RoleBinding\n      metadata:\n        creationTimestamp: null\n        name: admin\n        namespace: ${PROJECT_NAME}\n      roleRef:\n        apiGroup: rbac.authorization.k8s.io\n        kind: ClusterRole\n        name: admin\n      subjects:\n      - apiGroup: rbac.authorization.k8s.io\n        kind: User\n        name: ${PROJECT_ADMIN_USER}\n    parameters:\n    - name: PROJECT_NAME\n    - name: PROJECT_DISPLAYNAME\n    - name: PROJECT_DESCRIPTION\n    - name: PROJECT_ADMIN_USER\n    - name: PROJECT_REQUESTING_USER\n    ```\n\n\n    ```bash\n    oc apply -f yaml_collection/template.yaml -n __NCOLOR_START:red__openshift-config__NCOLOR_END__\n    ```\n\n2. Edit project config\n\n    ```bash\n    oc edit project.config.openshift.io/cluster\n    ```\n\n\n    ![image.png](/notion-images/d3da82af01c9a33282263bab53780d90fe48082c.png)\n\n\n    ```yaml\n    spec:\n      projectRequestMessage: Contact Cluster System Administrator to Create Project\n      projectRequestTemplate: \n        name: __NCOLOR_START:red__project-request __NCOLOR_END__\n    ```\n\n3. Disable self provisioning project for basic user\n\n    ```bash\n    oc patch clusterrolebinding.rbac self-provisioners -p '{\"subjects\": null}'\n    \n    #Disable automatic update to cluster role#\n    oc patch clusterrolebinding.rbac self-provisioners -p '{ \"metadata\": { \"annotations\": { \"rbac.authorization.kubernetes.io/autoupdate\": \"false\" } } }'\n    ```\n\n4. Verify Project Template\n\n    Verify disable self provision project\n\n\n    ```bash\n    oc new-project __NCOLOR_START:red__<project>__NCOLOR_END__ --as=__NCOLOR_START:red__<basic_user>__NCOLOR_END__ --as-group=system:authenticated --as-group=system:authenticated:oauth\n    ```\n\n\n    Expected output \n\n\n    ![image.png](/notion-images/9bcab7e2ef41931933125ca5db5217b9898d0c36.png)\n\n\n    How to enable self provision project :\n\n\n    ```bash\n    oc adm policy add-cluster-role-to-group self-provisioner system:authenticated:oauth\n    oc patch clusterrolebinding.rbac self-provisioners -p '{ \"metadata\": { \"annotations\": { \"rbac.authorization.kubernetes.io/autoupdate\": \"true\" } } }'\n    ```\n\n\n    Verify basic-user create project from template add node selector\n\n\n    ```bash\n    #1. Check node role#\n    oc get node -o wide\n    \n    #2. Change project to test app workload#\n    oc login -u __NCOLOR_START:red__<basic-user> __NCOLOR_END__-p__NCOLOR_START:red__ <user-password> __NCOLOR_END__\n    oc project __NCOLOR_START:red__<test-project>__NCOLOR_END__\n    \n    #3. Create test app#\n    oc new-app https://github.com/rgerardi/hellogo.git\n    \n    #4. Scale replica pod to make sure app only run in worker node#\n    oc scale deployment/hellogo --replicas=10\n    ```\n\n\n    Expected output \n\n5. Check Node role\n\n    ![image.png](/notion-images/9aa42d48a454a6103b9aaafedcd224a5bb9b9aac.png)\n\n6. Change project to test app workload\n\n    ![image.png](/notion-images/0e23ef71505783443a4998c2af4d2689ba269866.png)\n\n7. Create test app\n\n    ![image.png](/notion-images/e6aa0b087cc1c6e881dbb4880b850a6fdf149b76.png)\n\n8. Scale app verify run in worker node\n\n    ![image.png](/notion-images/6173103726968295406a2c7158da6a8b2b151d02.png)\n\n\n    Delete recent testing project\n\n\n    ```bash\n    oc login -u admin -p __NCOLOR_START:red__<password-admin>__NCOLOR_END__\n    oc delete project __NCOLOR_START:red__<test-project>\n    __NCOLOR_END__oc delete user__NCOLOR_START:red__ <basic_user>__NCOLOR_END__\n    ```\n\n\n### E. Garbage Collection\n\n\nGarbage Collection is used for automatic controlling node resource based on threeshold config by prunning unused image and current pod resources\n\nGarbage Collection digunakan untuk kontrol automasi penggunaan node resource dengan cara menghapus image yang tidak digunakan atau prunning image atau dengan membatasi penggunaan resource pod yang di schedule di node worker. Garbage Collection berhubungan dengan membuang image yang tidak digunakan oleh running pods.\n\n\n### F. Automated ETCD backup\n\n\n# Nodes Installation\n\n\n### A. Router Ingress\n\n\n### B. Monitoring\n\n\n### C. Image Registry\n\n\n### D. Logging\n\n",
    "tags": [
      "Cloud",
      "Monitoring",
      "DevOps"
    ],
    "category": "Openshift",
    "headings": [
      {
        "level": 1,
        "text": "Introduction",
        "slug": "introduction"
      },
      {
        "level": 1,
        "text": "Prerequisite",
        "slug": "prerequisite"
      },
      {
        "level": 1,
        "text": "Post Installation",
        "slug": "post-installation"
      },
      {
        "level": 3,
        "text": "A. Add Admin User",
        "slug": "a-add-admin-user"
      },
      {
        "level": 3,
        "text": "B. Machine Config Pool",
        "slug": "b-machine-config-pool"
      },
      {
        "level": 3,
        "text": "C. Machine Sets",
        "slug": "c-machine-sets"
      },
      {
        "level": 3,
        "text": "D. Project Template",
        "slug": "d-project-template"
      },
      {
        "level": 3,
        "text": "E. Garbage Collection",
        "slug": "e-garbage-collection"
      },
      {
        "level": 3,
        "text": "F. Automated ETCD backup",
        "slug": "f-automated-etcd-backup"
      },
      {
        "level": 1,
        "text": "Nodes Installation",
        "slug": "nodes-installation"
      },
      {
        "level": 3,
        "text": "A. Router Ingress",
        "slug": "a-router-ingress"
      },
      {
        "level": 3,
        "text": "B. Monitoring",
        "slug": "b-monitoring"
      },
      {
        "level": 3,
        "text": "C. Image Registry",
        "slug": "c-image-registry"
      },
      {
        "level": 3,
        "text": "D. Logging",
        "slug": "d-logging"
      }
    ]
  },
  {
    "id": "2784a369-535d-8187-9459-cc58484e9105",
    "title": "Sustainable Travel: How to Reduce Your Carbon Footprint",
    "slug": "sustainable-travel-how-to-reduce-your-carbon-footprint",
    "description": "gggggg",
    "date": "2025-06-08",
    "content": "\ngggggg\n\n",
    "tags": [
      "Networking"
    ],
    "category": "AMQ",
    "headings": []
  },
  {
    "id": "27d4a369-535d-80a8-ab04-eb6d0ad8477c",
    "title": "Deploy OCP on AWS with IPI Method (part 1)",
    "slug": "deploy-ocp-on-aws-with-ipi-method-part-1",
    "coverImage": "/notion-images/15b93834088dc2210a2fdf9aa017ab99919f4293.png",
    "coverImageOriginal": "/notion-images/15b93834088dc2210a2fdf9aa017ab99919f4293.png",
    "description": "# Introduction",
    "date": "2025-03-21",
    "content": "\n# Introduction\n\n\nRedHat's container orchestration platform with an easy-to-use IPI deployment method for AWS\n\n\nTopology :\n\n\n![image.png](/notion-images/9519917b3dbb01d176d754669f46c5ffd6fbbb56.png)\n\n\n# Prerequisite\n\n1. Account Subscribtion RedHat\n    1. Login to -> [<span class=\"notion-red\" style=\"color:#E03A45\">Console RedHat</span>](https://console.redhat.com/openshift/install/aws/installer-provisioned)\n    2. Copy Pull Secret\n2. Account AWS Administrator\n    1. Access key ID\n    2. Secret Access key\n3. Active Public Domain\n    1. Hosted Zone AWS\n    2. Register Propagate Nameserver\n\n### **A. DNS Record**\n\n> [Reference](https://docs.redhat.com/en/documentation/openshift_container_platform/4.16/html/installing_on_aws/installing-aws-account#installation-aws-route53_installing-aws-account)\n\n💡 Use the hosted zone in the AWS menu to set up DNS for the cluster. The hosted zone will be configured with a public IP address later.\n\n1. **Create Hosted Zone** **`Route 53`** **→ Hosted Zone →  Create** **`Hosted Zone`**\n\n    ![image.png](/notion-images/ba73b808fb3bcdb5adcd49154ac0a3689ea0ef46.png)\n\n    - Domain name : **(Active Domain)**\n    - Type : **Public hosted Zone**\n    - **Save**\n    - Copy All Nameserver\n2. Choose **Active Domain** **→** <span class=\"notion-red\" style=\"color:#E03A45\">**`Nameserver`**</span> **→** Paste all nameserver from <span class=\"notion-red\" style=\"color:#E03A45\">**`Hosted Zone`**</span>\n\n    ![image.png](/notion-images/5a8ea52dfa8207a58d0dba8494c73955a97f601c.png)\n\n    - Wait up to 24 hours for the DNS propagation to complete\n    - Check propagation : [https://dnschecker.org/](https://dnschecker.org/)\n\n### B. **VPC**\n\n> [Reference](https://docs.redhat.com/en/documentation/openshift_container_platform/4.16/html/installing_on_aws/installer-provisioned-infrastructure#installing-aws-vpc)\n\n💡 Using a custom VPC for cluster traffic isolation\n\n1. Create **`VPC`**\n\n    ![image.png](/notion-images/e588c447046c5b14f2c040ce201b9dbe8dc1415c.png)\n\n\n    ![image.png](/notion-images/23a72e605ecdeb4af5a847bbe26aca1707a77be0.png)\n\n\n    ![image.png](/notion-images/c99afe6043d4964b8e731d85302b663ec05668ce.png)\n\n    - Resource to create : <span class=\"notion-red\" style=\"color:#E03A45\">VPC and More</span>\n    - Name tag auto-generation : **(VPC cluster name)**\n    - IPv4 CIDR Block : <span class=\"notion-red\" style=\"color:#E03A45\">10.0.0.0/16</span>\n    - Availability Zone : <span class=\"notion-red\" style=\"color:#E03A45\">3</span>\n    - Subnet Public : <span class=\"notion-red\" style=\"color:#E03A45\">3</span>\n    - Subnet Private : <span class=\"notion-red\" style=\"color:#E03A45\">3</span>\n    - Nat gateways : <span class=\"notion-red\" style=\"color:#E03A45\">in 1 AZ</span>\n    - VPC Endpoint : <span class=\"notion-red\" style=\"color:#E03A45\">S3 Gateway</span>\n    - **Create VPC**\n\n### C. **Security Group** \n\n\n💡 Security Group Needed for access traffic will be use in Bastion\n\n1. Create `Security Group`\n\n    ![2043ce9e-fdb3-4658-863b-39b56e9e0734.png](/notion-images/0524e9063e8fee625b4e492672d864f007ddb049.png)\n\n    - Security Group Name : <span class=\"notion-red\" style=\"color:#E03A45\">BastionSG</span>\n    - Inbound : <span class=\"notion-red\" style=\"color:#E03A45\">SSH - Source Anywhere</span>\n    - Outbond : <span class=\"notion-red\" style=\"color:#E03A45\">All Traffic - Source Anywhere</span>\n\n### D. **Bastion**\n\n> [Reference](https://docs.redhat.com/en/documentation/openshift_container_platform/4.16/html/networking/accessing-hosts#accessing-hosts-on-aws_accessing-hosts)\n\n💡 Bastion is used to access the cluster that will be created later. The bastion also plays a role in the OCP cluster bootstrap installation.\n\n1. Create Bastion <span class=\"notion-red\" style=\"color:#E03A45\">**`EC2`**</span> **→** <span class=\"notion-red\" style=\"color:#E03A45\">**`Instance`**</span>\n\n    ![1244f1ac-d795-4ff2-bc6b-3da92fd30f21.png](/notion-images/9104132d27abbf4f1dba3d0a58d6e611b8dc736b.png)\n\n    - Name : <span class=\"notion-red\" style=\"color:#E03A45\">Bastion</span>\n    - AMI : <span class=\"notion-red\" style=\"color:#E03A45\">Ubuntu server 24.04</span>\n    - Instance Type : <span class=\"notion-red\" style=\"color:#E03A45\">t2.2xlarge</span>\n    - Keypair : <span class=\"notion-red\" style=\"color:#E03A45\">ocp-key</span>\n    - VPC : <span class=\"notion-red\" style=\"color:#E03A45\">ocp-dev-vpc</span>\n    - Subnet : <span class=\"notion-red\" style=\"color:#E03A45\">Public subnet - zone a</span>\n    - Auto assign public IP : <span class=\"notion-red\" style=\"color:#E03A45\">Enable</span>\n    - Security Group : <span class=\"notion-red\" style=\"color:#E03A45\">select existing SG - BastionSG</span>\n    - Storage : <span class=\"notion-red\" style=\"color:#E03A45\">50GB</span>\n    - **Launch Instance**\n\n# Cluster Installation\n\n> [Reference 1](https://docs.redhat.com/en/documentation/openshift_container_platform/4.16/html/networking/accessing-hosts#accessing-hosts-on-aws_accessing-hosts)\n> [Reference 2](https://docs.redhat.com/en/documentation/openshift_container_platform/4.16/html/networking/accessing-hosts#accessing-hosts-on-aws_accessing-hosts)\n\n### A. **Tools**\n\n> [Link mirror client OCP](https://docs.redhat.com/en/documentation/openshift_container_platform/4.16/html/networking/accessing-hosts#accessing-hosts-on-aws_accessing-hosts)\n\n**💡 Do this in Bastion Host with same AWS VPC**\n\n\n💡 Download the required tools for OCP cluster installation on the bastion host <span class=\"notion-red\" style=\"color:#E03A45\">**after SSH access using the key**</span>. You'll need to download both the OC client (oc command) and OCP Cluster Installer (ocp install) that match your desired version.\n\n\n![image.png](/notion-images/fd234219c55c32f7a16eaaecf77fa9bb45640016.png)\n\n1. Setup <span class=\"notion-red\" style=\"color:#E03A45\">**`OC Command`**</span>\n\n    ```bash\n    mkdir {ocp-dev,tools}\n    cd tools\n    wget https://mirror.openshift.com/pub/openshift-v4/clients/ocp/4.15.35/openshift-client-linux-4.15.35.tar.gz\n    tar xvf openshift-client-linux-4.15.35.tar.gz\n    sudo cp kubectl /usr/bin/\n    sudo cp oc /usr/bin/\n    ```\n\n2. Download <span class=\"notion-red\" style=\"color:#E03A45\">**`OCP Installer`**</span>\n\n    ```bash\n    wget https://mirror.openshift.com/pub/openshift-v4/clients/ocp/4.15.35/openshift-install-linux-4.15.35.tar.gz\n    tar xvf openshift-install-linux-4.15.35.tar.gz\n    cp ~/tools/openshift-install ~/ocp-dev/\n    ```\n\n3. Config <span class=\"notion-red\" style=\"color:#E03A45\">**`OC Bash Completion`**</span>\n\n    ```bash\n    oc completion bash > oc_bash_completion\n    sudo cp oc_bash_completion /etc/bash_completion.d/\n    ```\n\n\n### B. **SSH Key**\n\n> [Reference](https://docs.redhat.com/en/documentation/openshift_container_platform/4.16/html/installing_on_any_platform/installing-platform-agnostic#ssh-agent-using_installing-platform-agnostic)\n\n💡 The SSH key will be used to establish communication between the installer <span class=\"notion-red\" style=\"color:#E03A45\">**`Bastion Host`**</span> and the `Bootstrap node` to create the cluster according to the configuration \n\n\n![image.png](/notion-images/5022b209011a3d5a9b8da35384a41a2e9dbeb632.png)\n\n1. Generate <span class=\"notion-red\" style=\"color:#E03A45\">**`SSH key`**</span>\n\n    ```bash\n    ssh-keygen -t ed25519 -N '' -f <path>/<file_name>\n    ls ~/.ssh\n    cat <path>/<file_name>.pub\n    ```\n\n2. Add <span class=\"notion-red\" style=\"color:#E03A45\">**`ssh-agent`**</span>\n\n    ```bash\n    eval \"$(ssh-agent -s)\"\n    ssh-add <path>/<file_name>\n    ```\n\n\n### C. **Pull Secret**\n\n> [Reference](https://docs.redhat.com/en/documentation/openshift_container_platform/4.16/html/installing_on_any_platform/installing-platform-agnostic#ssh-agent-using_installing-platform-agnostic)\n> [Reference](https://docs.redhat.com/en/documentation/openshift_container_platform/4.16/html/installing_on_any_platform/installing-platform-agnostic#ssh-agent-using_installing-platform-agnostic)\n\n💡 A pull secret is used to identify users who want to use OCP. The pull secret is obtained from the Red Hat user who will create the cluster, and logging in is required to obtain it.\n\n1. <span class=\"notion-red\" style=\"color:#E03A45\">**`Login`**</span> **→** <span class=\"notion-red\" style=\"color:#E03A45\">**`Downloads`**</span> **→** <span class=\"notion-red\" style=\"color:#E03A45\">**`Tokens`**</span> **-** Copy <span class=\"notion-red\" style=\"color:#E03A45\">**`Pull Secret`**</span>\n\n    ![image.png](/notion-images/5f2c1ff70ed82916cb59e48600f5ab2900143b33.png)\n\n\n### **D. Install Config** \n\n\n💡 Creating installation configuration for AWS OCP cluster through manifest generation\n\n1. Create Installer Configuration\n\n    ![image.png](/notion-images/20be0b2288484b5ab332a6172cd18af3601bec35.png)\n\n\n    ```bash\n    ./openshift-install create install-config --dir <installation_directory>\n    ```\n\n    - SSH Public Key : <span class=\"notion-red\" style=\"color:#E03A45\">/home/ubuntu/.ssh/ocp-dev.pub</span>\n    - Platform : <span class=\"notion-red\" style=\"color:#E03A45\">AWS</span>\n    - AWS Access Key ID : <span class=\"notion-red\" style=\"color:#E03A45\">(Access key ID)</span>\n    - AWS Secret Access Key : <span class=\"notion-red\" style=\"color:#E03A45\">(Secret Access Key)</span>\n    - Region : <span class=\"notion-red\" style=\"color:#E03A45\">ap-southeast-1</span>\n    - Base Domain : <span class=\"notion-red\" style=\"color:#E03A45\">ziddma.my.id</span>\n    - Cluster Name : <span class=\"notion-red\" style=\"color:#E03A45\">ocp-dev</span>\n    - Pull Secret : **(Paste Pull Secret)**\n2. Edit Install Config\n    > [Link Install-config Example](https://raw.githubusercontent.com/Ziddma/Openshift-AWS/refs/heads/main/install/install-config.yaml)\n\n    💡 Edit install-config.yaml allow us to customize cluster’s specification. This include change detail such the instance type for Master and Worker node, the worker replica count and disk size for each node\n\n\n    ![image.png](/notion-images/04da10c720550cb53412500912b979469c578ab4.png)\n\n\n    ![5f626604-5708-4096-ab4b-f7b92b8c9331.png](/notion-images/eebdc4beb97a30fd9291a2506b2df995697fad56.png)\n\n\n    💡Installing OCP has standard minimum specification instance on AWS, 4/16 for **Master Node** and 2/8 for **Worker node**, and each type at least have 100gb storage for running system. In this lab we use M5.* family instance type and many tested type for installing OCP in below references\n\n    > [Instance Type Specification](https://aws.amazon.com/ec2/instance-types/)\n    > [Reference](https://docs.redhat.com/en/documentation/openshift_container_platform/4.16/html/installing_on_aws/installer-provisioned-infrastructure)\n    - Master\n        - **Iops : 4000**\n        - **Size : 100**\n        - **Type m5.2xlarge**\n    - Compute\n        - **Iops : 4000**\n        - **Size : 100**\n        - **Type m5.4xlarge**\n    - Subnet : (Paste all subnet ID from AWS console)\n    - Publish : **External / Internal**\n3. Create manifest from <span class=\"notion-red\" style=\"color:#E03A45\">**`install-config`**</span>\n\n    ![image.png](/notion-images/63c05aeb97563cabf077116c939226c228ac1d0e.png)\n\n\n    ```bash\n    ./openshift-install create manifests --dir <installation_directory>\n    ```\n\n\n### E. **Create Cluster**\n\n\n💡 When create cluster it happens any time your connection can distraction, either we can use tmux or screen to prevent \n\n\n```bash\ntmux new -s <session_name>\n\t\t\n#If lost connection, resume with\ntmux list-session\ntmux a -t <session_name>\n```\n\n1. Create Cluster from manifest\n\n    ```bash\n    ./openshift-install create cluster --dir <installation_directory> --log-level=debug\n    ```\n\n\n    💡 During installation, cluster gradually from Master - Bootstrap - Worker nodes, this can be monitoring from aws console, eventually cluster has successfully made, log installation can check at :\n\n\n    ```bash\n    tail -f ~/<installation_directory>/.openshift-install.log\n    ```\n\n2. Verification Installation\n    > [Reference](https://docs.redhat.com/en/documentation/openshift_container_platform/4.16/html/validation_and_troubleshooting/validating-an-installation#reviewing-the-installation-log_validating-an-installation)\n\n    💡 Verification cluster to convincing all cluster setup and bootstrap are clearly done\n\n\n    ![c1c43e4e-372e-4541-8ac3-6822459147ff.png](/notion-images/64a57bf8d613018e90c302735c2c27a3f8653e43.png)\n\n\n    Link of web console & password will appear when all part cluster done made, password kube admin can be found at\n\n\n    ```bash\n    ~/<Installation_folder>/auth/kubeadmin-password\n    ```\n\n\n    To make bastion can access with role **system:admin**, use command\n\n\n    ```bash\n    export KUBECONFIG=<Installation_folder>/auth/kubeconfig\n    ```\n\n\n    Logging OC CLI can be done through the web console, which require being logged in as an administrator first\n\n\n    **Login → Copy login command → Display Token → Copy token  → Paste in bastion**\n\n\n    ![image.png](/notion-images/cc7da792c2212f86c500978661986630c72464d4.png)\n\n\n![image.png](/notion-images/1ee1a865e8f01d7bbfaa6a5952ba4c64028d7e83.png)\n\n",
    "tags": [
      "Cloud",
      "DevOps",
      "Monitoring"
    ],
    "category": "Openshift",
    "headings": [
      {
        "level": 1,
        "text": "Introduction",
        "slug": "introduction"
      },
      {
        "level": 1,
        "text": "Prerequisite",
        "slug": "prerequisite"
      },
      {
        "level": 3,
        "text": "A. DNS Record",
        "slug": "a-dns-record"
      },
      {
        "level": 3,
        "text": "B. VPC",
        "slug": "b-vpc"
      },
      {
        "level": 3,
        "text": "C. Security Group",
        "slug": "c-security-group"
      },
      {
        "level": 3,
        "text": "D. Bastion",
        "slug": "d-bastion"
      },
      {
        "level": 1,
        "text": "Cluster Installation",
        "slug": "cluster-installation"
      },
      {
        "level": 3,
        "text": "A. Tools",
        "slug": "a-tools"
      },
      {
        "level": 3,
        "text": "B. SSH Key",
        "slug": "b-ssh-key"
      },
      {
        "level": 3,
        "text": "C. Pull Secret",
        "slug": "c-pull-secret"
      },
      {
        "level": 3,
        "text": "D. Install Config",
        "slug": "d-install-config"
      },
      {
        "level": 3,
        "text": "E. Create Cluster",
        "slug": "e-create-cluster"
      }
    ]
  },
  {
    "id": "27e4a369-535d-8099-ad66-d054592ff21e",
    "title": "High Availibility Web Server using Nginx and Keepalived",
    "slug": "high-availibility-web-server-using-nginx-and-keepalived",
    "coverImage": "/notion-images/3b546662fa4131ceb6c3b6573c72bfff6fb2d462.png",
    "coverImageOriginal": "/notion-images/3b546662fa4131ceb6c3b6573c72bfff6fb2d462.png",
    "description": "## What is High Availibility?",
    "date": "2024-06-13",
    "content": "\n## What is High Availibility?\n\n\nHigh Availability Web Server is the ability of a web server system to continue operating and providing uninterrupted services around the clock, including when there is a failure or outage of one of its components. The main purpose of high availability (HA) is to reduce the risk of downtime or time when services are not available.\n\n\nOn this occasion, I will give a little example of implementing HA web server only on a virtual machine (VM) using a virtual box, now here is a little description of the needs for implementing the High Availibility web server\n\n\n### Requirements\n\n\n| No | Number | Type of Needs | Tools                  | Description                                                                            |\n| -- | ------ | ------------- | ---------------------- | -------------------------------------------------------------------------------------- |\n| 1  | 2      | Web Server    | 1. Apache2             | Used to serve requests from clients and process all processing                         |\n| 2  | 1      | Master LB     | 1. Nginx 2. Keepalived | Used as the main load balancer which will later be used to distribute _traffic_        |\n| 3  | 1      | Backup LB     | 1. Nginx 2. Keepalived | Used as a backup load balancer which will _take over_ if the main load balancer fails. |\n\n\n### Topology\n\n\n![Untitled.png](/notion-images/3d3a483bd49a63ec1398f80647b4d2b97e5fecda.png)\n\n\n| Node Name                | IP             |\n| ------------------------ | -------------- |\n| Master Load Balancer     | 192.168.100.10 |\n| Backup Load Balancer     | 192.168.100.11 |\n| Web Server 1             | 192.168.100.12 |\n| Web Server 2             | 192.168.100.13 |\n| Virtual IP Load Balancer | 192.168.100.50 |\n\n\n## Installation\n\n\n### A. Virtual Box\n\n\n![Untitled.png](/notion-images/97dc40270f0afabc30d068434fdc8b87248ab0b9.png)\n\n\n### B. Network Setting \n\n\nHas 2 adapters that are active **NAT** and **Host-only Adapter**\n\n\n![Untitled.png](/notion-images/b46295dc8861b058de4f0be3ea5909d79dcb37d2.png)\n\n\n![Untitled.png](/notion-images/a560f964fe70392a1f897769d488607adec663dd.png)\n\n\n![Untitled.png](/notion-images/651c9133c899a4f7e93b04a84e9709f81a8fdb14.png)\n\n\n### C. Assign IP\n\n1. Assign IP using ifupdown using the command\n\n    ```bash\n    sudo apt install ifupdown -y\n    ```\n\n2. Then enter the IP configuration\n\n    ```bash\n    sudo nano /etc/network/interfaces\n    ```\n\n3. Then change the contents of the configuration file\n\n    ```bash\n    auto lo\n    iface lo inet loopback\n    \n    auto enp0s3\n    iface enp0s3 inet dhcp\n    \n    auto enp0s8\n    iface enp0s8 inet static\n    \t__NCOLOR_START:red__address 192.168.100.10/24__NCOLOR_END__\n    ```\n\n    - In the <span class=\"notion-red\" style=\"color:#E03A45\">red</span> section, replace it according to the IP that has been previously determined on all servers\n\n        ```bash\n        systemctl restart networking\n        ```\n\n4. **Perform IP configuration on all nodes that have been installed**\n5. IP results using the **ip a** command on the Load Balancer Master node\n\n    ![Untitled.png](/notion-images/d688ec13f1b9d832f11c3f8aa913bbd496d9aab4.png)\n\n\n### D. Install Load Balancer\n\n1. Install nginx using the command\n\n    ```bash\n    sudo apt install nginx -y\n    ```\n\n2. Then enter the configuration for the proxy load balancer and create a file called \"**sister.conf**\"\n\n    ```bash\n    sudo nano /etc/nginx/conf.d/sister.conf\n    ```\n\n3. Enter the following configuration\n\n    ```bash\n    upstream sister-lb {\n    \t__NCOLOR_START:red__server 192.168.100.12__NCOLOR_END__:80;\n    \t__NCOLOR_START:red__server 192.168.100.13__NCOLOR_END__:80;\n    }\n    server {\n    \tlisten 80;\n    \tserver_name sister.com;\n    \taccess_log /var/log/nginx/access.log;\n    \terror_log /var/log/nginx/error.log;\n    location / {\n    \t\tproxy_pass http://sister-lb;\n    \t\tproxy_set_header Host $host;\n    \t\tproxy_set_header X-Real-IP $remote_addr;\n    \t}\n    }\n    ```\n\n4. Second configuration in the /etc/nginx/nginx.conf folder\n\n    ```bash\n    sudo nano /etc/nginx/nginx/conf\n    ```\n\n5. Then use the config and paste it in the file\n\n    ```bash\n    user www-data;\n    worker_processes auto;\n    worker_rlimit_nofile 8192;\n    pid /run/nginx.pid;\n    \n    events {\n            worker_connections 4096;\n    }\n    \n    http {\n            include       mime.types;\n            default_type  application/octet-stream;\n    \n            # Log Setting\n            log_format complete '\\$remote_addr - \\$remote_user [\\$time_local] \"\\$request\" '\n                    '\\$status $body_bytes_sent \"\\$http_referer\" '\n                    '\"\\$http_user_agent\" \"\\$http_x_forwarded_for\" '\n                    'rt=\\$request_time '\n                    'ua=\"\\$upstream_addr\" us=\"\\$upstream_status\" '\n                    'ut=\"\\$upstream_response_time\" ul=\"\\$upstream_response_length\"';\n            access_log /var/log/nginx/access.log complete;\n            error_log  /var/log/nginx/error.log warn;\n    \n            # Sending fille Optimization\n            sendfile on;\n            tcp_nopush on;\n            tcp_nodelay on;\n    \n            # Keepalive Connection\n            keepalive_timeout 65;\n    \n            upstream sister-lb {\n                    __NCOLOR_START:red__server 192.168.100.12:80;\n                    server 192.168.100.13:80;__NCOLOR_END__\n            }\n    \n            server {\n                    listen 80;\n                    server_name __NCOLOR_START:red__sister.com__NCOLOR_END__;\n    \n                    location / {\n                            # HTTP 1.1\n                            proxy_http_version 1.1;\n                            proxy_set_header Connection \"\";\n                            proxy_set_header Host $host;\n                            proxy_pass http://__NCOLOR_START:red__sister-lb__NCOLOR_END__;\n                    }\n            }\n    }\n    ```\n\n    - In the upstream section filled with IP web server 1 with ip **100.12** and Web server 2 with ip = 100**.13**\n6. Then restart nginx\n\n    ```bash\n    sudo systemctl restart nginx\n    ```\n\n7. Then run the following command, to check the configuration\n\n    ```bash\n    sudo nginx -t\n    ```\n\n    - If the configuration is successful, the results are as follows\n\n    ![Untitled.png](/notion-images/3f13e92024fc18a5faf6132503168f43658dd764.png)\n\n8. Next we reload nginx so that the config runs\n\n    ```bash\n    sudo nginx -s reload\n    ```\n\n\n### E. Install Web Server \n\n1. First install apache2 with the command\n\n    ```bash\n    sudo apt install apache2 -y\n    ```\n\n2. Then we will create a \"**sister\"** folder by way of\n\n    ```bash\n    sudo mkdir –p /var/www/sister\n    ```\n\n3. Create an index file for Web-Server-1 by way of\n\n    ```bash\n    sudo nano /var/www/sister/index.html\n    ```\n\n    - Fill in the text \"This is web server 1\" as follows\n\n    ![Untitled.png](/notion-images/d8cabbbfc392c37f08385324f041b5a1665b2f6a.png)\n\n    - Then save\n4. Then create a new virtual host by way of :\n\n    ```bash\n    sudo nano /etc/apache2/sites-available/000-default.conf\n    ```\n\n    - Add a configuration line to the existing one\n\n    ```bash\n    <VirtualHost *:80>\n    ...\n    \tServerName __NCOLOR_START:red__sister.com__NCOLOR_END__\n    \t...\n    \tDocumentRoot __NCOLOR_START:red__/var/www/sister__NCOLOR_END__\n    \t__NCOLOR_START:red__<Directory /var/www/sister>\n    \t\tOptions All\n    \t\tAllowOverride All\n    \t\tRequire all granted\n    \t</Directory>__NCOLOR_END__\n    \tErrorLog ${APACHE_LOG_DIR}/__NCOLOR_START:red__sister__NCOLOR_END__-error.log\n    \tCustomLog ${APACHE_LOG_DIR}/__NCOLOR_START:red__sister__NCOLOR_END__-access.log combined\n    ...\n    </VirtualHost *:80>\n    ```\n\n    - So that it is more or less as follows\n\n    ![Untitled.png](/notion-images/ae4e84da951d8a6c60e49217457aff8f1dfdff18.png)\n\n5. Restart the Apache Webserver by way of\n\n    ```bash\n    sudo systemctl restart apache2\n    ```\n\n6. **DO THE ABOVE STEPS ON WEB SERVER 2 AS WELL**\n7. Check the web server using the ip in the web browser\n    - Results\n\n    ![Untitled.png](/notion-images/37bf3cbff22bd8139607c1a4975a3a77969677db.png)\n\n\n### F. Configuring Load Balancer\n\n1. First we will install keepalived with the command\n\n    ```bash\n    sudo apt install keepalived -y\n    ```\n\n2. Then we will create the keepalived.conf file in the specified folder with the command\n\n    ```bash\n    sudo nano /etc/keepalived/keepalived.conf\n    ```\n\n3. There are 2 configurations on the **MASTER** and **BACKUP** Load balancer servers\n    - **Master Server Load Balancer**\n\n    ```yaml\n    vrrp_instance VI_1 {\n            interface __NCOLOR_START:red__enp0s8__NCOLOR_END__\n            state __NCOLOR_START:red__MASTER__NCOLOR_END__\n            priority 200\n            advert_int 1\n            unicast_src_ip __NCOLOR_START:red__192.168.100.10__NCOLOR_END__\n            unicast_peer {\n                    __NCOLOR_START:red__192.168.100.11__NCOLOR_END__\n            }\n    \n            virtual_router_id 33\n            virtual_ipaddress {\n                    __NCOLOR_START:red__192.168.100.50/24__NCOLOR_END__\n            }\n    \n            authentication {\n                    auth_type PASS\n                    auth_pass 123\n            }\n    }\n    ```\n\n    - **Backup Server Load Balancer**\n\n    ```yaml\n    vrrp_instance VI_1 {\n            interface __NCOLOR_START:red__enp0s8__NCOLOR_END__\n            state __NCOLOR_START:red__BACKUP__NCOLOR_END__\n            priority 100\n            advert_int 1\n            unicast_src_ip __NCOLOR_START:red__192.168.100.11__NCOLOR_END__\n            unicast_peer {\n                    __NCOLOR_START:red__192.168.100.10__NCOLOR_END__\n            }\n    \n            virtual_router_id 33\n            virtual_ipaddress {\n                    __NCOLOR_START:red__192.168.100.50/24__NCOLOR_END__\n            }\n    \n            authentication {\n                    auth_type PASS\n                    auth_pass 123\n            }\n    }\n    ```\n\n    - Note:\n        1. <span class=\"notion-red\" style=\"color:#E03A45\">interface</span> according to the interface that we install on the VM\n        2. <span class=\"notion-red\" style=\"color:#E03A45\">state</span> in the declaration according to Backup / Master\n        3. <span class=\"notion-red\" style=\"color:#E03A45\">Priority</span> on Master must be higher than Backup\n        4. <span class=\"notion-red\" style=\"color:#E03A45\">unicast_src_ip</span>: according to the IP of the node itself\n        5. <span class=\"notion-red\" style=\"color:#E03A45\">unicast_peer</span>: according to the backup IP or vice versa\n        6. <span class=\"notion-red\" style=\"color:#E03A45\">virtual_ipaddress</span>: according to the VIP that we created earlier\n    - Here is the Load Balancer Master config\n\n    ![Untitled.png](/notion-images/ebe7bd589e32523a580c808072e5b468fb7ba2fa.png)\n\n4. Then **restart** **keepalived** on both servers with the command\n\n    ```bash\n    systemctl restart keepalived\n    ```\n\n5. Check the keepalived status with the command\n\n    ```bash\n    systemctl status keepalived\n    ```\n\n    - Here's an example of keepalived status on the Master Load Balancer server\n\n    ![Untitled.png](/notion-images/46701010b2dfa49b984adc69dacb77deab9eebfd.png)\n\n\n## Verify\n\n\n### A. Proving HA Web server 1 and 2 \n\n1. By accessing the load balancer ip or domain that we have set and **refreshing** the **page** repeatedly2\n    1. Can the web server be accessed by both?\n    2. If web server 1 dies, can only web server 2 be displayed?\n    3. If web server 2 dies, only web server 1 can be displayed?\n\n![Untitled.png](/notion-images/f4da3830f21e42cfbde3e3dc851279c32436a411.png)\n\n1. By accessing the logs from the load balancer itself, but to make it clear we will install \"**ccze**\" on the LB Master with the command\n\n    ```bash\n    apt install ccze\n    ```\n\n    - Then access the log in the **/var/log/nginx/access.log** folder with the command\n\n    ```bash\n    tail -f /var/log/nginx/access.log | ccze\n    ```\n\n    - Then try to refresh the Virtual IP repeatedly, here is an example\n\n    ![Untitled.png](/notion-images/f5027cbe08eee637ce2a59e0fdfc0383407fb8c0.png)\n\n    - Pay attention to the red circle\n        1. Is the IP generated alternately between Web servers 1 and 2?\n        2. If one of the Web IPs is turned off, will there only be 1 ip that is on and vice versa?\n\n### B. Proof of HA LB Master and LB Backup \n\n1. In testing the Load Balancer here, we will try to turn off 1 LB master, then check the keepalived status on the LB master or LB backup.\n\n    ```bash\n    systemctl status keepalived\n    ```\n\n    - Here is an example of the output of the command on **LB Master**\n\n    ![Untitled.png](/notion-images/0d59d7e2b653422bd422788ab28a6a5d646ba5de.png)\n\n    - Note on the red circled one, that the LB master shows the master state\n    - Then is an example of output from **LB Backup**\n\n    ![Untitled.png](/notion-images/b0281676b7f334cd56da9e1504554d751953c2ab.png)\n\n    - **Then we will try to test by entering down time on LB Master with the command to turn off the node or turn off keepalived on LB Master.**\n        1. Does the LB backup change status to \"Entering MASTER STATE\"?\n        2. If the LB master server enters uptime, does the status on keepalived become \"Entering MASTER STATE\"?\n        3. Does the LB backup change back to \"BACKUP STATE\"?\n",
    "tags": [
      "Networking",
      "Linux",
      "Infra"
    ],
    "category": "RHEL",
    "headings": [
      {
        "level": 2,
        "text": "What is High Availibility?",
        "slug": "what-is-high-availibility"
      },
      {
        "level": 3,
        "text": "Requirements",
        "slug": "requirements"
      },
      {
        "level": 3,
        "text": "Topology",
        "slug": "topology"
      },
      {
        "level": 2,
        "text": "Installation",
        "slug": "installation"
      },
      {
        "level": 3,
        "text": "A. Virtual Box",
        "slug": "a-virtual-box"
      },
      {
        "level": 3,
        "text": "B. Network Setting",
        "slug": "b-network-setting"
      },
      {
        "level": 3,
        "text": "C. Assign IP",
        "slug": "c-assign-ip"
      },
      {
        "level": 3,
        "text": "D. Install Load Balancer",
        "slug": "d-install-load-balancer"
      },
      {
        "level": 3,
        "text": "E. Install Web Server",
        "slug": "e-install-web-server"
      },
      {
        "level": 3,
        "text": "F. Configuring Load Balancer",
        "slug": "f-configuring-load-balancer"
      },
      {
        "level": 2,
        "text": "Verify",
        "slug": "verify"
      },
      {
        "level": 3,
        "text": "A. Proving HA Web server 1 and 2",
        "slug": "a-proving-ha-web-server-1-and-2"
      },
      {
        "level": 3,
        "text": "B. Proof of HA LB Master and LB Backup",
        "slug": "b-proof-of-ha-lb-master-and-lb-backup"
      }
    ]
  },
  {
    "id": "2784a369-535d-81db-b293-e1a17c9811a7",
    "title": "📈 Next.js SEO — A Clean & Practical Checklist",
    "slug": "next-js-seo-a-clean-practical-checklist",
    "description": "If you want your Next.js site to actually show up on Google (and look great when shared on social), this is what you should do — step by step.",
    "date": "2025-10-17T15:43:39.871Z",
    "content": "\nIf you want your Next.js site to actually show up on Google (and look great when shared on social), this is what you should do — step by step.\n\n\n---\n\n\n## 1. Meta Tags — Why They Matter\n\n\nMeta tags give search engines and social platforms info about your page.\n\n\nIf you skip them, your site might look like a blank page on Google or Twitter.\n\n1. **Always add these basic meta tags:**\n\n| Tag           | Why it's important                                         |\n| ------------- | ---------------------------------------------------------- |\n| `title`       | The title of your page (what people see on Google results) |\n| `description` | Short description (also visible in search results)         |\n| `keywords`    | Optional, not used much by Google, but harmless            |\n| `robots`      | Tells crawlers if they should index your page              |\n| `viewport`    | Controls how your site looks on mobile devices             |\n| `charSet`     | Character encoding (UTF-8 is standard)                     |\n\n1. **Open Graph meta tags:** (for social sharing)\n\n| Tag                                  | Why it's important                                |\n| ------------------------------------ | ------------------------------------------------- |\n| `og:site_name`                       | Name of your site                                 |\n| `og:locale`                          | Language/locale                                   |\n| `og:title`                           | Title when shared on social                       |\n| `og:description`                     | Description on social                             |\n| `og:type`                            | `website` or `article`                            |\n| `og:url`                             | URL of the page                                   |\n| `og:image`                           | Image shown in preview _(use PNG/JPG — no WebP!)_ |\n| `og:image:alt`                       | Alt text for accessibility                        |\n| `og:image:type`                      | Image type (image/png)                            |\n| `og:image:width` + `og:image:height` | Image dimensions                                  |\n\n1. **Article-specific Open Graph tags:**\n\n_(important for blog posts, articles, news)_\n\n\n| Tag                      | Why it's important    |\n| ------------------------ | --------------------- |\n| `article:published_time` | When it was published |\n| `article:modified_time`  | Last update time      |\n| `article:author`         | Author name           |\n\n\n👉 **Twitter meta tags:** (for Twitter/X previews)\n\n\n| Tag                   | Why it's important        |\n| --------------------- | ------------------------- |\n| `twitter:card`        | Large image summary       |\n| `twitter:site`        | Site's Twitter handle     |\n| `twitter:creator`     | Author's Twitter handle   |\n| `twitter:title`       | Title on Twitter          |\n| `twitter:description` | Description on Twitter    |\n| `twitter:image`       | Image URL (again PNG/JPG) |\n\n\n---\n\n\n## 2. How to Add Meta Tags in Next.js\n\n\n👉 In App Router, define `viewport` + `metadata`:\n\n\n```typescript\nexport const viewport = {\n  width: \"device-width\",\n  initialScale: 1,\n  themeColor: \"#ffffff\"\n};\n```\n\n\n```typescript\nexport const metadata = {\n  title: \"Site Title\",\n  description: \"Short site description\",\n  keywords: [\"keyword1\", \"keyword2\"],\n  openGraph: {\n    siteName: \"My Site\",\n    type: \"website\",\n    locale: \"en_US\",\n    images: [{ url: \"https://yoursite.com/og-image.png\", width: 1200, height: 630, alt: \"My Site\" }]\n  },\n  twitter: {\n    card: \"summary_large_image\",\n    title: \"Site Title\",\n    description: \"Short site description\",\n    images: [{ url: \"https://yoursite.com/og-image.png\", width: 1200, height: 630, alt: \"My Site\" }]\n  },\n  robots: {\n    index: true,\n    follow: true,\n    googleBot: \"index, follow\"\n  },\n  alternates: {\n    canonical: \"https://yoursite.com\"\n  }\n};\n```\n\n\n👉 On dynamic pages (blog posts), use `generateMetadata()`:\n\n\n```typescript\nexport async function generateMetadata({ params }) {\n  const post = await fetch(`YOUR_ENDPOINT/${params.slug}`).then(res => res.json());\n\n  return {\n    title: `${post.title} | My Site`,\n    description: post.description,\n    openGraph: {\n      title: `${post.title} | My Site`,\n      description: post.description,\n      type: \"article\",\n      url: `https://yoursite.com/${post.slug}`,\n      publishedTime: post.created_at,\n      modifiedTime: post.modified_at,\n      authors: [\"https://yoursite.com/about\"],\n      tags: post.categories,\n      images: [\n        {\n          url: `https://yoursite.com/assets/${post.slug}/thumbnail.png`,\n          width: 1024,\n          height: 576,\n          alt: post.title\n        }\n      ]\n    },\n    twitter: {\n      card: \"summary_large_image\",\n      title: `${post.title} | My Site`,\n      description: post.description,\n      images: [{ url: `https://yoursite.com/assets/${post.slug}/thumbnail.png`, width: 1024, height: 576, alt: post.title }]\n    },\n    alternates: {\n      canonical: `https://yoursite.com/${post.slug}`\n    }\n  };\n}\n```\n\n\n---\n\n\n## 3. JSON-LD Schema — Why Bother?\n\n\nJSON-LD adds \"structured data\" for Google.\n\n\nIt helps Google understand your page type (Blog Post, Product, Event...) and improves rich snippets.\n\n\n👉 Example for blog post:\n\n\n```json\nconst jsonLd = {\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"BlogPosting\",\n  mainEntityOfPage: { \"@type\": \"WebPage\", \"@id\": \"https://yoursite.com/my-post\" },\n  headline: \"Post Title\",\n  description: \"Post description\",\n  image: \"https://yoursite.com/assets/my-post/thumbnail.png\",\n  datePublished: \"2024-01-11T11:35:00+07:00\",\n  dateModified: \"2024-01-11T11:35:00+07:00\",\n  author: { \"@type\": \"Person\", name: \"Your Name\", url: \"https://linkedin.com/in/yourname\" },\n  publisher: { \"@type\": \"Person\", name: \"Your Name\", logo: { \"@type\": \"ImageObject\", url: \"https://yoursite.com/avatar.jpg\" } },\n  inLanguage: \"en-US\",\n  isFamilyFriendly: \"true\"\n};\n```\n\n\n👉 Render this in your component:\n\n\n```typescript\n<script\n  type=\"application/ld+json\"\n  dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }}\n/>\n```\n\n\n👉 Use this tool to generate schemas: [https://technicalseo.com/tools/schema-markup-generator/](https://technicalseo.com/tools/schema-markup-generator/)\n\n\n---\n\n\n## 🗺️ Sitemap — Why You Need It\n\n\nSitemap helps Google crawl _all_ your pages. Without it, some deep links may never get indexed.\n\n\n👉 In Pages Router:\n\n\nUse [`next-sitemap`](https://www.npmjs.com/package/next-sitemap)\n\n\n```shell\nnpm install next-sitemap\nnpx next-sitemap\n```\n\n\n👉 In App Router:\n\n\nManually define `app/sitemap.ts`:\n\n\n```typescript\nexport default async function sitemap() {\n  const pages = [\n    { url: \"https://yoursite.com\", lastModified: new Date(), changeFrequency: \"daily\", priority: 1 },\n    { url: \"https://yoursite.com/about\", lastModified: new Date(), changeFrequency: \"monthly\", priority: 0.9 }\n    // more pages\n  ];\n\n  return pages;\n}\n```\n\n\n👉 Result will be accessible at:\n\n\n```plain text\narduino\nCopyEdit\nhttps://yoursite.com/sitemap.xml\n```\n\n\n---\n\n\n## 🤖 robots.txt — Controlling Crawlers\n\n\n`robots.txt` tells search engines which pages to crawl or ignore.\n\n\n👉 In Pages Router:\n\n\n`public/robots.txt`:\n\n\n```bash\nmakefile\nCopyEdit\nUser-agent: *\nDisallow:\nSitemap: https://yoursite.com/sitemap.xml\n```\n\n\n👉 To block certain pages:\n\n\n```bash\nDisallow: /search?q=\nDisallow: /admin\n```\n\n\n👉 In App Router:\n\n\nDefine `app/robots.ts`:\n\n\n```typescript\nexport default function robots() {\n  return {\n    rules: {\n      userAgent: \"*\",\n      allow: [\"/\"],\n      disallow: [\"/search?q=\", \"/admin\"]\n    },\n    sitemap: [\"https://yoursite.com/sitemap.xml\"]\n  };\n}\n```\n\n\n---\n\n\n## 🔗 Important Link Tags\n\n\n👉 Always include these in your head:\n\n\n| Link Tag           | Purpose                                                       |\n| ------------------ | ------------------------------------------------------------- |\n| `canonical`        | Prevent duplicate content issues — tell Google the \"main\" URL |\n| `alternate`        | Used for multilingual sites                                   |\n| `icon`             | Favicon                                                       |\n| `apple-touch-icon` | iOS home screen icon                                          |\n| `manifest`         | For PWA support                                               |\n\n\n---\n\n\n# Summary — What You Should Do (Minimal Checklist)\n\n\n✅ Add full **Meta Tags** (title, description, OG, Twitter)\n\n\n✅ Add **JSON-LD schema** for key pages\n\n\n✅ Generate and serve a **sitemap.xml**\n\n\n✅ Serve a **robots.txt**\n\n\n✅ Include proper **link tags** (canonical, icon, manifest)\n\n\n---\n\n\nIf you do all of this, your Next.js site will:\n\n\n✅ Look great in search results\n\n\n✅ Show rich previews on social media\n\n\n✅ Be fully crawlable and indexable by Google\n\n",
    "tags": [
      "Automation",
      "Monitoring"
    ],
    "category": "Openshift",
    "headings": [
      {
        "level": 2,
        "text": "1. Meta Tags — Why They Matter",
        "slug": "1-meta-tags--why-they-matter"
      },
      {
        "level": 2,
        "text": "2. How to Add Meta Tags in Next.js",
        "slug": "2-how-to-add-meta-tags-in-nextjs"
      },
      {
        "level": 2,
        "text": "3. JSON-LD Schema — Why Bother?",
        "slug": "3-json-ld-schema--why-bother"
      },
      {
        "level": 2,
        "text": "🗺️ Sitemap — Why You Need It",
        "slug": "️-sitemap--why-you-need-it"
      },
      {
        "level": 2,
        "text": "🤖 robots.txt — Controlling Crawlers",
        "slug": "-robotstxt--controlling-crawlers"
      },
      {
        "level": 2,
        "text": "🔗 Important Link Tags",
        "slug": "-important-link-tags"
      },
      {
        "level": 1,
        "text": "Summary — What You Should Do (Minimal Checklist)",
        "slug": "summary--what-you-should-do-minimal-checklist"
      }
    ]
  }
]